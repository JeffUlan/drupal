<?php

/**
 * @file
 * Install, update and uninstall functions for the media_library module.
 */

use Drupal\media\Entity\MediaType;
use Drupal\views\Entity\View;

/**
 * Implements hook_install().
 */
function media_library_install() {
  // Change the path to the original media view.
  /** @var \Drupal\views\Entity\View $view */
  if ($view = View::load('media')) {
    $display = &$view->getDisplay('media_page_list');
    if (!empty($display)) {
      $display['display_options']['path'] = 'admin/content/media-table';
      unset($display['display_options']['menu']);
      $view->trustData()->save();
    }
  }
  if (!\Drupal::isConfigSyncing()) {
    foreach (MediaType::loadMultiple() as $type) {
      _media_library_configure_form_display($type);
      _media_library_configure_view_display($type);
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function media_library_uninstall() {
  // Restore the path to the original media view.
  /** @var \Drupal\views\Entity\View $view */
  if ($view = View::load('media')) {
    $display = &$view->getDisplay('media_page_list');
    if (!empty($display)) {
      $display['display_options']['path'] = 'admin/content/media';
      $display['display_options']['menu'] = [
        'type' => 'tab',
        'title' => 'Media',
        'description' => '',
        'expanded' => FALSE,
        'parent' => '',
        'weight' => 0,
        'context' => '0',
        'menu_name' => 'main',
      ];
      $view->trustData()->save();
    }
  }
}

/**
 * Create the 'media_library' image style.
 */
function media_library_update_8701() {
  // This update function has been moved to
  // media_library_post_update_add_media_library_image_style().
}

/**
 * Updates the media library view widget display (contextual) filters.
 */
function media_library_update_8702() {
  $view = \Drupal::configFactory()->getEditable('views.view.media_library');
  if ($view && $view->get('display.widget')) {
    $view->set('display.widget.display_options.defaults.filters', FALSE);
    $view->set('display.widget.display_options.defaults.filter_groups', FALSE);
    $view->set('display.widget.display_options.defaults.arguments', FALSE);
    $view->set('display.widget.display_options.filters', [
      'status' => [
        'id' => 'status',
        'table' => 'media_field_data',
        'field' => 'status',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'operator' => '=',
        'value' => '1',
        'group' => 1,
        'exposed' => FALSE,
        'expose' => [
          'operator_id' => '',
          'label' => '',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => '',
          'identifier' => '',
          'required' => FALSE,
          'remember' => FALSE,
          'multiple' => FALSE,
          'remember_roles' => [
            'authenticated' => 'authenticated',
          ],
        ],
        'is_grouped' => FALSE,
        'group_info' => [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' => [],
          'group_items' => [],
        ],
        'entity_type' => 'media',
        'entity_field' => 'status',
        'plugin_id' => 'boolean',
      ],
      'name' => [
        'id' => 'name',
        'table' => 'media_field_data',
        'field' => 'name',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'operator' => 'contains',
        'value' => '',
        'group' => 1,
        'exposed' => TRUE,
        'expose' => [
          'operator_id' => 'name_op',
          'label' => 'Name',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => 'name_op',
          'identifier' => 'name',
          'required' => FALSE,
          'remember' => FALSE,
          'multiple' => FALSE,
          'remember_roles' => [
            'authenticated' => 'authenticated',
            'anonymous' => '0',
            'administrator' => '0',
          ],
        ],
        'is_grouped' => FALSE,
        'group_info' => [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' => [],
          'group_items' => [],
        ],
        'entity_type' => 'media',
        'entity_field' => 'name',
        'plugin_id' => 'string',
      ],
    ]);
    $view->set('display.widget.display_options.filter_groups', [
      'operator' => 'AND',
      'groups' => [
        1 => 'AND',
      ],
    ]);
    $view->set('display.widget.display_options.arguments', [
      'bundle' => [
        'id' => 'bundle',
        'table' => 'media_field_data',
        'field' => 'bundle',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'default_action' => 'ignore',
        'exception' => [
          'value' => 'all',
          'title_enable' => FALSE,
          'title' => 'All',
        ],
        'title_enable' => FALSE,
        'title' => '',
        'default_argument_type' => 'fixed',
        'default_argument_options' => [
          'argument' => '',
        ],
        'default_argument_skip_url' => FALSE,
        'summary_options' => [
          'base_path' => '',
          'count' => TRUE,
          'items_per_page' => 25,
          'override' => FALSE,
        ],
        'summary' => [
          'sort_order' => 'asc',
          'number_of_records' => 0,
          'format' => 'default_summary',
        ],
        'specify_validation' => FALSE,
        'validate' => [
          'type' => 'none',
          'fail' => 'not found',
        ],
        'validate_options' => [],
        'glossary' => FALSE,
        'limit' => 0,
        'case' => 'none',
        'path_case' => 'none',
        'transform_dash' => FALSE,
        'break_phrase' => FALSE,
        'entity_type' => 'media',
        'entity_field' => 'bundle',
        'plugin_id' => 'string',
      ],
    ]);
    $view->save(TRUE);
  }
}

/**
 * Add edit and delete button to media library view page display.
 */
function media_library_update_8703() {
  $view = \Drupal::configFactory()->getEditable('views.view.media_library');
  if (!$view->isNew() && $view->get('display.page')) {
    // Fetch the fields from the page display, if the fields are not yet
    // overridden, get the fields from the default display.
    $fields = $view->get('display.page.display_options.fields');
    if (!$fields) {
      $fields = $view->get('display.default.display_options.fields');
      // Override the fields for the page display.
      $view->set('display.page.display_options.defaults.fields', FALSE);
    }

    // Check if the name field already exists and add if it doesn't.
    if (!isset($fields['name'])) {
      $fields['name'] = [
        'id' => 'name',
        'table' => 'media_field_data',
        'field' => 'name',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'label' => '',
        'exclude' => TRUE,
        'alter' => [
          'alter_text' => FALSE,
          'text' => '',
          'make_link' => FALSE,
          'path' => '',
          'absolute' => FALSE,
          'external' => FALSE,
          'replace_spaces' => FALSE,
          'path_case' => 'none',
          'trim_whitespace' => FALSE,
          'alt' => '',
          'rel' => '',
          'link_class' => '',
          'prefix' => '',
          'suffix' => '',
          'target' => '',
          'nl2br' => FALSE,
          'max_length' => 0,
          'word_boundary' => TRUE,
          'ellipsis' => TRUE,
          'more_link' => FALSE,
          'more_link_text' => '',
          'more_link_path' => '',
          'strip_tags' => FALSE,
          'trim' => FALSE,
          'preserve_tags' => '',
          'html' => FALSE,
        ],
        'element_type' => '',
        'element_class' => '',
        'element_label_type' => '',
        'element_label_class' => '',
        'element_label_colon' => FALSE,
        'element_wrapper_type' => '',
        'element_wrapper_class' => '',
        'element_default_classes' => TRUE,
        'empty' => '',
        'hide_empty' => FALSE,
        'empty_zero' => FALSE,
        'hide_alter_empty' => TRUE,
        'click_sort_column' => 'value',
        'type' => 'string',
        'settings' => [
          'link_to_entity' => FALSE,
        ],
        'group_column' => 'value',
        'group_columns' => [],
        'group_rows' => TRUE,
        'delta_limit' => 0,
        'delta_offset' => 0,
        'delta_reversed' => FALSE,
        'delta_first_last' => FALSE,
        'multi_type' => 'separator',
        'separator' => ', ',
        'field_api_classes' => FALSE,
        'entity_type' => 'media',
        'entity_field' => 'name',
        'plugin_id' => 'field',
      ];
    }

    // Check if the edit link field already exists and add if it doesn't.
    if (!isset($fields['edit_media'])) {
      $fields['edit_media'] = [
        'id' => 'edit_media',
        'table' => 'media',
        'field' => 'edit_media',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'label' => '',
        'exclude' => FALSE,
        'alter' => [
          'alter_text' => TRUE,
          'text' => 'Edit {{ name }}',
          'make_link' => TRUE,
          'path' => '',
          'absolute' => FALSE,
          'external' => FALSE,
          'replace_spaces' => FALSE,
          'path_case' => 'none',
          'trim_whitespace' => FALSE,
          'alt' => 'Edit {{ name }}',
          'rel' => '',
          'link_class' => 'media-library-item__edit',
          'prefix' => '',
          'suffix' => '',
          'target' => '',
          'nl2br' => FALSE,
          'max_length' => 0,
          'word_boundary' => TRUE,
          'ellipsis' => TRUE,
          'more_link' => FALSE,
          'more_link_text' => '',
          'more_link_path' => '',
          'strip_tags' => FALSE,
          'trim' => FALSE,
          'preserve_tags' => '',
          'html' => FALSE,
        ],
        'element_type' => '',
        'element_class' => '',
        'element_label_type' => '',
        'element_label_class' => '',
        'element_label_colon' => FALSE,
        'element_wrapper_type' => '0',
        'element_wrapper_class' => '',
        'element_default_classes' => FALSE,
        'empty' => '',
        'hide_empty' => FALSE,
        'empty_zero' => FALSE,
        'hide_alter_empty' => TRUE,
        'text' => 'Edit',
        'output_url_as_text' => FALSE,
        'absolute' => FALSE,
        'entity_type' => 'media',
        'plugin_id' => 'entity_link_edit',
      ];
    }

    // Check if the delete link field already exists and add if it doesn't.
    if (!isset($fields['delete_media'])) {
      $fields['delete_media'] = [
        'id' => 'delete_media',
        'table' => 'media',
        'field' => 'delete_media',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'label' => '',
        'exclude' => FALSE,
        'alter' => [
          'alter_text' => TRUE,
          'text' => 'Delete {{ name }}',
          'make_link' => TRUE,
          'path' => '',
          'absolute' => FALSE,
          'external' => FALSE,
          'replace_spaces' => FALSE,
          'path_case' => 'none',
          'trim_whitespace' => FALSE,
          'alt' => 'Delete {{ name }}',
          'rel' => '',
          'link_class' => 'media-library-item__remove',
          'prefix' => '',
          'suffix' => '',
          'target' => '',
          'nl2br' => FALSE,
          'max_length' => 0,
          'word_boundary' => TRUE,
          'ellipsis' => TRUE,
          'more_link' => FALSE,
          'more_link_text' => '',
          'more_link_path' => '',
          'strip_tags' => FALSE,
          'trim' => FALSE,
          'preserve_tags' => '',
          'html' => FALSE,
        ],
        'element_type' => '',
        'element_class' => '',
        'element_label_type' => '',
        'element_label_class' => '',
        'element_label_colon' => FALSE,
        'element_wrapper_type' => '0',
        'element_wrapper_class' => '',
        'element_default_classes' => FALSE,
        'empty' => '',
        'hide_empty' => FALSE,
        'empty_zero' => FALSE,
        'hide_alter_empty' => TRUE,
        'text' => 'Delete',
        'output_url_as_text' => FALSE,
        'absolute' => FALSE,
        'entity_type' => 'media',
        'plugin_id' => 'entity_link_delete',
      ];
    }

    // Move the rendered entity field to the last position for accessibility.
    $rendered_entity = $fields['rendered_entity'];
    unset($fields['rendered_entity']);
    $fields['rendered_entity'] = $rendered_entity;

    $view->set('display.page.display_options.fields', $fields)
      ->save(TRUE);
  }
}
