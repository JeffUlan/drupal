<?php

/**
 * @file
 * Definition of Drupal\system\Tests\Upgrade\ImageUpgradePathTest.
 */

namespace Drupal\system\Tests\Upgrade;

use Drupal\Component\Utility\String;

/**
 * Test upgrade of overridden and custom image styles.
 */
class ImageUpgradePathTest extends UpgradePathTestBase {
  public static function getInfo() {
    return array(
      'name' => 'Image upgrade test',
      'description' => 'Upgrade tests for overridden and custom image styles.',
      'group' => 'Upgrade path',
    );
  }

  public function setUp() {
    $this->databaseDumpFiles = array(
      drupal_get_path('module', 'system') . '/tests/upgrade/drupal-7.bare.standard_all.database.php.gz',
      drupal_get_path('module', 'system') . '/tests/upgrade/drupal-7.image.database.php',
    );
    parent::setUp();
  }

  /**
   * Tests that custom and overridden image styles have been upgraded.
   */
  public function testImageStyleUpgrade() {
    $this->assertTrue($this->performUpgrade(), 'The upgrade was completed successfully.');

    // A custom user image style.
    $expected_styles['test-custom'] = array(
      'name' => 'test-custom',
      'label' => 'Test custom',
      'status' => '1',
      'langcode' => 'en',
      'effects' => array(
        'image_rotate' => array(
          'id' => 'image_rotate',
          'data' => array(
            'degrees' => '90',
            'bgcolor' => '#FFFFFF',
            'random' => '1',
          ),
          'weight' => '1',
        ),
        'image_desaturate' => array(
          'id' => 'image_desaturate',
          'data' => array(),
          'weight' => '2',
        ),
      ),
    );
    // An image style shipped with Drupal 7 but overwritten by the user.
    $expected_styles['thumbnail'] = array(
      'name' => 'thumbnail',
      'label' => 'Thumbnail (100x100)',
      'status' => '1',
      'langcode' => 'en',
      'effects' => array (
        'image_scale' => array(
          'id' => 'image_scale',
          'data' => array (
            'width' => '177',
            'height' => '177',
            'upscale' => '0',
          ),
          'weight' => '0',
        ),
      ),
    );
    // A non-overwritten image style. Has to be imported in Drupal 8 as well.
    $expected_styles['large'] = array(
      'name' => 'large',
      'label' => 'Large (480x480)',
      'status' => '1',
      'langcode' => 'en',
      'effects' => array (
        'image_scale' => array(
          'id' => 'image_scale',
          'data' => array (
            'width' => '480',
            'height' => '480',
            'upscale' => '0',
          ),
          'weight' => '0',
        ),
      ),
    );
    $config_factory = $this->container->get('config.factory');
    foreach ($expected_styles as $name => $style) {
      $configured_style = $config_factory->get('image.style.' . $name)->get();

      // Maybe the image style hasn't been imported?
      $imported = !empty($configured_style);
      $this->assertTrue($imported, String::format('%name has been imported', array('%name' => $style['label'])));
      if (!$imported) {
        continue;
      }

      // Replace placeholder with image effect name keys with UUID's generated
      // during by the image style upgrade functions.
      foreach ($configured_style['effects'] as $uuid => $effect) {
        // Copy placeholder data.
        $style['effects'][$uuid] = $style['effects'][$effect['id']];
        // Set the missing uuid key as this is unknown because it is a UUID.
        $style['effects'][$uuid]['uuid'] = $uuid;
        // Remove the placeholder data.
        unset($style['effects'][$effect['id']]);
      }
      // Make sure UUID assigned to new style.
      $this->assertTrue($configured_style['uuid'], 'UUID assigned to converted style.');
      // Copy generated UUID to compared style.
      $style['uuid'] = $configured_style['uuid'];
      $this->assertEqual($this->sortByKey($style), $this->sortByKey($configured_style));
    }
  }

  /**
   * Sorts all keys in configuration data.
   *
   * Since we can not be sure of the order of the UUID's generated by
   * _image_update_get_style_with_effects() we need to sort the data in order
   * to compare it with data saved in the config system.
   *
   * @param array $data
   *   An associative array to sort recursively by key name.
   *
   * @return array
   *   A sorted array.
   */
  public function sortByKey(array $data) {
    ksort($data);
    foreach ($data as &$value) {
      if (is_array($value)) {
        $value = $this->sortByKey($value);
      }
    }
    return $data;
  }

  /**
   * Tests if the field and instance setting 'default_image' has been
   * successfully converted from an integer to an associative array.
   */
  public function testImageFieldDefaultImageUpgrade() {
    // Perform upgrade.
    $this->assertTrue($this->performUpgrade(), 'The upgrade was completed successfully.');

    // While this test is testing the upgrade path against a Drupal 7 'standard'
    // profile installation we assume that node bundle 'article', having the
    // 'field_image' image field, is installed too.
    $cases = array('field.field.node.field_image', 'field.instance.node.article.field_image');
    foreach ($cases as $case) {
      $default_image = \Drupal::config($case)->get('settings.default_image');

      // Check is was converted to an array.
      $this->assertTrue(is_array($default_image));

      // Check if 'default_image' contains a key named 'fid'. It might be an
      // integer or NULL.
      $this->assertTrue(array_key_exists('fid', $default_image));

      // Check if 'alt' key exists and is a string.
      $this->assertTrue(isset($default_image['alt']) && is_string($default_image['alt']));

      // Check if 'title' key exists and is a string.
      $this->assertTrue(isset($default_image['title']) && is_string($default_image['title']));

      // Check if 'width' key exists. It might be an integer or NULL.
      $this->assertTrue(array_key_exists('width', $default_image));

      // Check if 'height' key exists. It might be an integer or NULL.
      $this->assertTrue(array_key_exists('height', $default_image));
    }
  }

}
