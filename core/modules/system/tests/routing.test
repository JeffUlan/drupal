<?php

/**
 * @file
 * Tests for Symfony2-related functionality.
 */

use Symfony\Component\Routing\Route;
use Symfony\Component\Routing\RouteCollection;

use Drupal\simpletest\WebTestBase;
use Drupal\Core\Database\Database;
use Drupal\Core\Routing\UrlMatcherDumper;

/**
 * Basic tests for the UrlMatcherDumper.
 *
 * Note: This should be a UnitTestBase, but those are broken right now in
 * Drupal HEAD.  Convert it to a UnitTest when that gets fixed.
 */
class UrlMatcherDumperTestCase extends WebTestBase {
  public static function getInfo() {
    return array(
      'name' => 'Routing',
      'description' => 'Confirm that the matcher dumper is functioning properly.',
      'group' => 'Routng',
    );
  }

  function setUp() {
    parent::setUp();
  }

  /**
   * Confirms that the dumper can be instantiated successfuly.
   */
  function testCreate() {
    $connection = Database::getConnection();
    $dumper= new UrlMatcherDumper($connection);

    $class_name = 'Drupal\Core\Routing\UrlMatcherDumper';
    $this->assertTrue($dumper instanceof $class_name, t('Dumper created successfully'));
  }

  /**
   * Confirms that we can add routes to the dumper.
   */
  function testAddRoutes() {
    $connection = Database::getConnection();
    $dumper= new UrlMatcherDumper($connection);

    $route = new Route('test');
    $collection = new RouteCollection();
    $collection->add('test_route', $route);

    $dumper->addRoutes($collection);

    $dumper_routes = $dumper->getRoutes()->all();
    $collection_routes = $collection->all();

    foreach ($dumper_routes as $name => $route) {
      $this->assertEqual($route->getPattern(), $collection_routes[$name]->getPattern(), t('Routes match'));
    }
  }

  /**
   * Confirms that we can add routes to the dumper when it already has some.
   */
  function testAddAdditionalRoutes() {
    $connection = Database::getConnection();
    $dumper= new UrlMatcherDumper($connection);

    $route = new Route('test');
    $collection = new RouteCollection();
    $collection->add('test_route', $route);
    $dumper->addRoutes($collection);

    $route = new Route('test2');
    $collection2 = new RouteCollection();
    $collection2->add('test_route2', $route);
    $dumper->addRoutes($collection2);

    // Merge the two collections together so we can test them.
    $collection->addCollection(clone $collection2);

    $dumper_routes = $dumper->getRoutes()->all();
    $collection_routes = $collection->all();

    $success = TRUE;
    foreach ($collection_routes as $name => $route) {
      if (empty($dumper_routes[$name])) {
        $success = FALSE;
        $this->fail(t('Not all routes found in the dumper.'));
      }
    }

    if ($success) {
      $this->pass('All routes found in the dumper.');
    }
  }

  /**
   * Confirms that we can add routes to the dumper when it already has some.
   */
  protected function prepareTables() {
    $connection = Database::getConnection();

    $tables['test_routes'] = array(
      'description' => 'Maps paths to various callbacks (access, page and title)',
      'fields' => array(
        'name' => array(
          'description' => 'Primary Key: Machine name of this route',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'pattern' => array(
          'description' => 'The path pattern for this URI',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'pattern_outline' => array(
          'description' => 'The pattern',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'access_callback' => array(
          'description' => 'The callback which determines the access to this router path. Defaults to user_access.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'access_arguments' => array(
          'description' => 'A serialized array of arguments for the access callback.',
          'type' => 'blob',
          'not null' => FALSE,
        ),
        'fit' => array(
          'description' => 'A numeric representation of how specific the path is.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'number_parts' => array(
          'description' => 'Number of parts in this router path.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'size' => 'small',
        ),
        'route' => array(
          'description' => 'A serialized Route object',
          'type' => 'text',
        ),
      ),
      'indexes' => array(
        'fit' => array('fit'),
        'pattern_outline' => array('pattern_outline'),
      ),
      'primary key' => array('name'),
    );


    $schema = $connection->schema();
    $schema->dropTable('test_routes');
    $schema->createTable('test_routes', $tables['test_routes']);
  }

}

/**
 * Basic tests for the Route.
 *
 * Note: This should be a UnitTestBase, but those are broken right now in
 * Drupal HEAD.  Convert it to a UnitTest when that gets fixed.
 */
class RouteTestCase extends WebTestBase {
  public static function getInfo() {
    return array(
      'name' => 'Routes',
      'description' => 'Confirm that route object is functioning properly.',
      'group' => 'Routng',
    );
  }

  function setUp() {
    parent::setUp();
  }

  public function testCompilation() {

    $route = new Route('test/{something}/more');
    $route->setOption('compiler_class', 'Drupal\Core\Routing\RouteCompiler');
    $compiled = $route->compile();

    $this->assertEqual($route, $compiled->getRoute(), t('Compiled route has the correct route object.'));
    $this->assertEqual($compiled->getFit(), 5 /* That's 101 binary*/, t('The fit was correct.'));

  }

}
